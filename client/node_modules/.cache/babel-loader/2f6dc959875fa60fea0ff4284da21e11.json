{"ast":null,"code":"import _classCallCheck from \"/Users/karlelisawesley/Documents/HavardBootcamp/Project3/knowledge-able-app-final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/karlelisawesley/Documents/HavardBootcamp/Project3/knowledge-able-app-final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from \"jwt-decode\";\nimport axios from \"axios\";\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService() {\n    var _this = this;\n\n    _classCallCheck(this, AuthService);\n\n    this.login = function (username, password) {\n      // Get a token\n      return axios.post(\"/api/users/login\", {\n        username: username,\n        password: password\n      }).then(function (res) {\n        // set the token once the user logs in\n        _this.setToken(res.data.token); // return the rest of the response\n\n\n        return res;\n      });\n    };\n\n    this.getProfile = function () {\n      return decode(_this.getToken());\n    };\n  }\n\n  _createClass(AuthService, [{\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken();\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      axios.defaults.headers.common[\"Authorization\"] = \"Bearer \".concat(idToken);\n      localStorage.setItem(\"id_token\", idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      axios.defaults.headers.common[\"Authorization\"] = null; // localStorage.removeItem(\"id_token\");\n\n      localStorage.clear(); // this will reload the page and reset the state of the application\n\n      window.location.reload(\"/\");\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/karlelisawesley/Documents/HavardBootcamp/Project3/knowledge-able-app-final/client/src/components/AuthService/index.js"],"names":["decode","axios","AuthService","login","username","password","post","then","res","setToken","data","token","getProfile","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","defaults","headers","common","localStorage","setItem","getItem","clear","window","location","reload"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,YAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IACqBC,W;;;;;;;;SACnBC,K,GAAQ,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9B;AACA,aAAOJ,KAAK,CACTK,IADI,CACC,kBADD,EACqB;AACxBF,QAAAA,QAAQ,EAAEA,QADc;AAExBC,QAAAA,QAAQ,EAAEA;AAFc,OADrB,EAKJE,IALI,CAKC,UAAAC,GAAG,EAAI;AACX;AACA,QAAA,KAAI,CAACC,QAAL,CAAcD,GAAG,CAACE,IAAJ,CAASC,KAAvB,EAFW,CAGX;;;AACA,eAAOH,GAAP;AACD,OAVI,CAAP;AAWD,K;;SAEDI,U,GAAa,YAAM;AACjB,aAAOZ,MAAM,CAAC,KAAI,CAACa,QAAL,EAAD,CAAb;AACD,K;;;;;+BAEU;AACT;AACA,UAAMF,KAAK,GAAG,KAAKE,QAAL,EAAd;AACA,aAAO,CAAC,CAACF,KAAF,IAAW,CAAC,KAAKG,cAAL,CAAoBH,KAApB,CAAnB,CAHS,CAGsC;AAChD;;;mCAEcA,K,EAAO;AACpB,UAAI;AACF,YAAMI,OAAO,GAAGf,MAAM,CAACW,KAAD,CAAtB;;AACA,YAAII,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnC,iBAAO,IAAP;AACD,SAFD,MAEO,OAAO,KAAP;AACR,OALD,CAKE,OAAOC,GAAP,EAAY;AACZ,eAAO,KAAP;AACD;AACF;;;6BAEQC,O,EAAS;AAChB;AACAnB,MAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,qBAA2DH,OAA3D;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,OAAjC;AACD;;;+BAEU;AACT;AACA,aAAOI,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACD;;;6BAEQ;AACP;AACAzB,MAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,IAAjD,CAFO,CAGP;;AACAC,MAAAA,YAAY,CAACG,KAAb,GAJO,CAKP;;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;;;;;SAvDkB5B,W","sourcesContent":["import decode from \"jwt-decode\";\nimport axios from \"axios\";\nexport default class AuthService {\n  login = (username, password) => {\n    // Get a token\n    return axios\n      .post(\"/api/users/login\", {\n        username: username,\n        password: password\n      })\n      .then(res => {\n        // set the token once the user logs in\n        this.setToken(res.data.token);\n        // return the rest of the response\n        return res;\n      });\n  };\n\n  getProfile = () => {\n    return decode(this.getToken());\n  };\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${idToken}`;\n    localStorage.setItem(\"id_token\", idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    axios.defaults.headers.common[\"Authorization\"] = null;\n    // localStorage.removeItem(\"id_token\");\n    localStorage.clear();\n    // this will reload the page and reset the state of the application\n    window.location.reload(\"/\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}